[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'vim-latex/vim-latex'
on_ft = 'tex'

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = 'html'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

#go.toml
[[plugins]] 
repo = 'fatih/vim-go'
on_ft = 'go'

[[plugins]]
repo = 'zchee/deoplete-go'
build = 'make'
on_ft = 'go'
depends = ['deoplete.nvim']
hook_source = '''
    let g:deoplete#sources#go#gocode_binary = $GOPATH . '~/go'
'''
[[plugins]]
   repo = 'Shougo/deoplete.nvim'
   hook_add = '''
   let g:deoplete#enable_at_startup = 1
   let g:deoplete#auto_complete_delay = 0
   let g:deoplete#enable_camel_case = 0
   let g:deoplete#enable_ignore_case = 0
   let g:deoplete#enable_smart_case = 1
   let g:deoplete#enable_refresh_always = 1
  let g:deoplete#auto_complete_start_length = 1
  inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ deoplete#mappings#manual_complete()
  function! s:check_back_space() abort "{{{
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~ '\s'
  endfunction"}}}
  '''
  on_i = 1


[[plugins]]
repo = "zchee/deoplete-clang"
on_ft = "cpp"
on_ft = "c"
depends = "deoplete.nvim"
hook_add = """
let g:deoplete#sources#clang#libclang_path='/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libclang.dylib'
let g:deoplete#sources#clang#clang_header='/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang'
"""
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'moll/vim-node'
on_ft = ['javascript']

[[plugins]]
repo = 'w0rp/ale.git'
on_source = ['lightline.vim']
hook_add = '''
  let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '']
  let g:ale_echo_msg_format = '[%linter%] %s'
  nmap <silent> <C-k> <Plug>(ale_previous_wrap)
  nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''
